package com.leetcode.huawei.medium;

import org.junit.Test;

/**
 * 279. 完全平方数
 *
 * 给定正整数 n，找到若干个完全平方数（比如 1, 4, 9, 16, ...）使得它们的和等于 n。你需要让组成和的完全平方数的个数最少。
 *
 * 给你一个整数 n ，返回和为 n 的完全平方数的 最少数量 。
 *
 * 完全平方数 是一个整数，其值等于另一个整数的平方；换句话说，其值等于一个整数自乘的积。例如，1、4、9 和 16 都是完全平方数，而 3 和 11 不是。
 *
 *  
 *
 * 示例 1：
 *
 * 输入：n = 12
 * 输出：3
 * 解释：12 = 4 + 4 + 4
 * 示例 2：
 *
 * 输入：n = 13
 * 输出：2
 * 解释：13 = 4 + 9
 *  
 * 提示：
 *
 * 1 <= n <= 104
 *
 */
public class Issue111 {

    @Test
    public void testFun() {

    }

    public int numSquares(int n) {
        //定义动态转移数组
        int[] dp = new int[n+1];
        //如果n=0,结果就是0
        dp[0] = 0;
        //循环，计算每一个值的最小平方数之和，比如n=12，就得计算从1，2，3，4，5...11的所有值
        for(int i = 1;i<=n;i++)
        {
            //当前数的最大的平方和是所有1相加，比如5就是1+1+1+1+1
            dp[i] = i;
            //利用动态规划，使用之前的计算结果去得到现在最优的结果
            //j从1开始，1，4，9，16。。。，加入此时i=10,那么j可选的值有1，4，9
            //如果j为1，就需要去比较，全为1的情况（不选）与dp[10-1]+1的大小（选）
            //如果j=2，此时平方为4，就需要比较全为1的情况(不选)与dp[10-4]+1的大小
            for(int j = 1;j*j<=i;j++)
            {
                //动态转移方程
                dp[i] = Math.min(dp[i],dp[i-j*j]+1);
            }
        }
        return dp[n];
    }

}
